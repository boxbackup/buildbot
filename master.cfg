# -*- python -*-
# ex: set syntax=python:

import secrets
reload(secrets)

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

c['slaves'] = []

from buildbot.buildslave.ec2 import EC2LatentBuildSlave

ec2 = {
    'instance_size': 't2.small',
    'region': 'eu-west-1',
    'subnet_id': 'subnet-00439359',
    'security_group': 'sg-a0186fc5',
}

for s in secrets.ec2_slaves:
    size = s.get('instance_size', ec2['instance_size'])

    c['slaves'].append(EC2LatentBuildSlave(s['user'], s['passwd'], size,
        ami=s['ami'], region=ec2['region'],
        subnet_id=ec2['subnet_id'], security_id=ec2['security_group']))

c['slaves'].extend(secrets.slaves)

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 'tcp:port=9989'}}

####### CHANGESOURCES

# We leave this empty as we don't poll any repos. We use hooks from GitHub
# instead.
c['change_source'] = []

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.status.results import SKIPPED

# There are possibly better ways of implementing this, but the slave names are
# based on the platform so it'll do.
def IsWindows(step):
    return step.build.getSlaveName() == 'windows'

def IsNotWindows(step):
    return step.build.getSlaveName() != 'windows'

def IsSmartOS(step):
    return step.build.getSlaveName() == 'smartos'

def IsLinuxOrBSD(step):
    return step.build.getSlaveName() != 'smartos' and step.build.getSlaveName() != 'windows'

factory = util.BuildFactory()

factory.addStep(steps.Git(repourl='git://github.com/boxbackup/boxbackup.git', mode='full'))
# Windows step removed as the worker was replaced by AppVeyor
#factory.addStep(steps.ShellCommand(command=["infrastructure/mingw/compile-boxbackup-cygwin.sh"], description='configuring mingw', descriptionDone='configure mingw', haltOnFailure=True, doStepIf=IsWindows, hideStepIf=lambda results, s: results==SKIPPED))
factory.addStep(steps.ShellCommand(command=["./bootstrap"], description='bootstrapping', descriptionDone='bootstrap'))
# Windows step removed as the worker was replaced by AppVeyor
#factory.addStep(steps.Configure(command=["infrastructure/mingw/configure.sh"], doStepIf=IsWindows, hideStepIf=lambda results, s: results==SKIPPED))
# Run a straightforward configure for Linux or FreeBSD
factory.addStep(steps.Configure(doStepIf=IsLinuxOrBSD, hideStepIf=lambda results, s: results==SKIPPED))
# Add LDFLAGS and CPPFLAGS to allow the build to work on SmartOS.
factory.addStep(steps.Configure(env={
    'LDFLAGS':'-L/opt/local/lib',
    'CPPFLAGS':'-I/opt/local/include'
}, doStepIf=IsSmartOS, hideStepIf=lambda results, s: results==SKIPPED))
factory.addStep(steps.Compile(command=["make","build-backup-client"], name='build-backup-client', descriptionSuffix='client'))
factory.addStep(steps.Compile(command=["make","build-backup-server"], name='build-backup-server', descriptionSuffix='server'))
factory.addStep(steps.Test(command=["make", "debug_tests"], description="debug testing", descriptionDone="debug tests"))
factory.addStep(steps.Test(command=["make", "release_tests"], description="release testing", descriptionDone="release tests"))
# Cleanup steps to kill any old test processes
# This is mainly for MacOS and SmartOS which are physical machines which aren't
# destroyed after each build.
for cmd in ["bbstored", "bbackupd", "s3simulator", "_test"]:
  factory.addStep(
    steps.ShellCommand(
      command=["pkill", "-u", "buildbot", cmd],
      description="cleanupi %s" % (cmd,),
      descriptionDone="cleanup %s" % (cmd,),
      doStepIf=IsNotWindows,
      hideStepIf=lambda results, s: results==SKIPPED,
      flunkOnFailure=False,
      warnOnFailure=False))

slave_builders = {
    'centos6': 'CentOS 6 amd64',
    'centos7': 'CentOS 7 amd64',
    'debian8': 'Debian Jessie amd64',
    'debian9ssl10': 'Debian Stretch LibSSL 1.0 amd64',
    'debian9ssl11': 'Debian Stretch LibSSL 1.1 amd64',
    'freebsd10-3': 'FreeBSD 10.3 amd64',
    'freebsd11-1': 'FreeBSD 11.1 amd64',
    'osx': 'macOS 10.12',
    'smartos': 'SmartOS',
    'ubuntu14-04': 'Ubuntu 14.04 amd64',
    'ubuntu16-04': 'Ubuntu 16.04 amd64'
}
#    'windows': 'Windows amd64'

# Define a lock as each slave has multiple builders and we only want to build
# one at a time.
build_lock = util.SlaveLock("slave_build", maxCount=1)

c['builders'] = []
for slave, name in slave_builders.items():
    for cat in ['all-branches', 'master']:
        c['builders'].append(util.BuilderConfig(
            name="%s %s" % (name, cat),
            slavenames=[slave],
            factory=factory,
            locks=[build_lock.access("exclusive")],
            category=cat
        ))

all_builders = [b.name for b in c['builders']]
master_builders = [b.name for b in c['builders'] if b.category == 'master']
other_builders = [b.name for b in c['builders'] if b.category != 'master']
#all_slaves = [ s.getConfigDict()['name'] for s in c['slaves'] ]

####### SCHEDULERS
# N.B. This normally comes before builders - moved below to take advantage of
# the all_builders list

def not_master(branch):
    return branch != 'master'

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch_fn=not_master),
    treeStableTimer=60,
    builderNames=other_builders))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="master",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=master_builders))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=all_builders))

c['schedulers'].append(schedulers.Try_Userpass(
                            name="try",
                            builderNames=all_builders,
                            port=9987,
                            userpass=secrets.try_users))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=secrets.web_auth,
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(
    http_port=8010,
    authz=authz_cfg,
    change_hook_dialects={
        'base': True,
        'github': {
            'secret': secrets.github,
            'strict': True
        }
    }
))

mail_notifier = status.MailNotifier(
    fromaddr="buildbot@boxbackup.org",
    lookup=""
)
c['status'].append(mail_notifier)

## GitHub status
from buildbot.plugins import status, util
#repoOwner = util.Interpolate("%(prop:github_repo_owner)s")
#repoName = util.Interpolate("%(prop:github_repo_name)s")
sha = util.Interpolate("%(src::revision)s")
# Need at least 0.8.14 to use context
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = status.GitHubStatus(token=secrets.github_api,
                         repoOwner='boxbackup',
                         repoName='boxbackup',
                         sha=sha,
                         context=context,
                         startDescription='Build started.',
                         endDescription='Build done.')
c['status'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Box Backup"
c['titleURL'] = "https://www.boxbackup.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://builds.boxbackup.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
